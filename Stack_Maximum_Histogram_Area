class Solution {
    public int largestRectangleArea(int[] heights) {
		int len=heights.length;
		Stack<Integer>st=new Stack<Integer>();
		int rt[]=new int[len];
		int lf[]=new int[len];
		for(int i=len-1;i>=0;i--) {
			if(st.empty()) {
					rt[i]=len;
			}
			else if(!st.empty()&&heights[st.peek()]<heights[i]) {
				rt[i]=st.peek();
			}
			else if(!st.empty()&&heights[st.peek()]>=heights[i]) {
				while(!st.empty()&&heights[st.peek()]>=heights[i]) {
					st.pop();				}
			if(st.empty()) {
				rt[i]=len;
			}
			else {
				rt[i]=st.peek();
			}}
			st.push(i);
		}
		while(!st.empty()) {
			st.pop();
		}
		for(int i=0;i<len;i++) {
			if(st.empty()) {
					lf[i]=-1;
			}
			else if(!st.empty()&&heights[st.peek()]<heights[i]) {
				lf[i]=st.peek();
			}
			else if(!st.empty()&&heights[st.peek()]>=heights[i]) {
				while(!st.empty()&&heights[st.peek()]>=heights[i]) {
					st.pop();				}
			if(st.empty()) {
				lf[i]=-1;
			}
			else {
				lf[i]=st.peek();
			}}
			st.push(i);
		}
		int ma=heights[0];
		for(int i=0;i<len;i++) {
			ma=Math.max(ma,heights[i]*(rt[i]-lf[i]-1));
		}

		return ma;
        } 
    }
